%% ACO Global Planning + Path Smoothing + Path Subsampling + DWA Local Path Following
clear; clc; close all;
global collisionCheckCounter; 
collisionCheckCounter = 0;  % Initialize collision check counter

%% ================== Environment Setup ==================
gridSize = [50,50];              % Grid dimensions
grid_static = zeros(gridSize);   % 0 = free, 1 = obstacle

% Outer walls
grid_static(1,:) = 1;        % Top wall
grid_static(50,:) = 1;       % Bottom wall
grid_static(:,1) = 1;        % Left wall
grid_static(:,50) = 1;       % Right wall

% Horizontal shelf rows with gaps
grid_static(8:10, 5:15)   = 1;    % Shelf row 1, segment 1
grid_static(8:10, 25:35)  = 1;    % Shelf row 1, segment 2
grid_static(18:20, 5:15)  = 1;    % Shelf row 2, segment 1
grid_static(18:20, 25:35) = 1;    % Shelf row 2, segment 2
grid_static(28:30, 10:20) = 1;    % Shelf row 3, segment 1
grid_static(28:30, 30:40) = 1;    % Shelf row 3, segment 2
grid_static(38:40, 5:15)  = 1;    % Shelf row 4, segment 1
grid_static(38:40, 25:35) = 1;    % Shelf row 4, segment 2

% Additional vertical shelf obstacles
grid_static(12:22, 40:42) = 1;
grid_static(30:40, 10:12) = 1;

%% ================= Global ACO Planning =================
% ACO parameters for the global planner
aco_params.num_ants = 50;
aco_params.max_iter = 100;
aco_params.alpha = 1;      % pheromone importance
aco_params.beta = 2;       % heuristic importance
aco_params.rho = 0.1;      % evaporation rate
aco_params.Q = 1;          % pheromone deposit factor

start_cell = [2, 2];       % Starting grid cell [x,y]
goal_cell  = [45, 45];     % Goal grid cell [x,y]

% Run ACO Global Planner to get raw global path (waypoints)
rawGlobalPath = acoGlobalPathPlanner(grid_static, start_cell, goal_cell, aco_params);

if isempty(rawGlobalPath)
    error('No path found by ACO planner.');
else
    disp('Raw global path found:');
    disp(rawGlobalPath);
end

%% =============== Path Smoothing ====================
% Smooth the raw global path
smoothGlobalPath = smoothPathACO(rawGlobalPath, grid_static);
disp('Smoothed global path:');
disp(smoothGlobalPath);

%% =========== Path Subsampling ====================
% To reduce complexity for the local planner, choose every 5th waypoint.
reducedGlobalPath = subsamplePath(smoothGlobalPath, 7);
disp('Reduced global path (every 5th point):');
disp(reducedGlobalPath);

%% ============== Local DWA Parameters ==================
params.max_v = 1.0;              % Maximum linear velocity [m/s]
params.max_omega = 1.0;          % Maximum angular velocity [rad/s]
params.dt = 0.1;                 % Time step [s]
params.predict_time = 3.0;       % Prediction horizon [s]
params.velocity_resolution = 0.1;
params.omega_resolution = 0.1;
params.robot_radius = 0.5;

lidar.angles = -pi/3 : pi/36 : pi/3;
lidar.max_range = 7;           % Sensing range

goal_reached_threshold = 0.5;  % Threshold to switch waypoints

%% ============== Bot Initialization ====================
bots = struct([]);
bots(1).state = [start_cell(1), start_cell(2), 0];  % [x, y, theta]
bots(1).trajectory = bots(1).state(1:2);
bots(1).color = 'r';
bots(1).finished = false;    % Final goal reached flag

%% =============== Metrics Initialization ================
metrics.bot.time_to_goal = NaN;         % Time when final goal reached
metrics.bot.total_distance = 0;           % Total distance traveled
metrics.bot.optimal_distance = norm(goal_cell - start_cell);
metrics.bot.cumulative_heading_change = 0; % Total heading change (radians)

max_iterations = 1500;  % Maximum iterations for simulation
iter = 1;               % Iteration counter
sim_start = tic;        % Start simulation timer

%% ======= Simulation Loop: Follow Reduced Global Path =======
waypointTolerance = 2.0;  % Adjust as needed

%% ======= Simulation Loop: Follow Reduced Global Path =======
% Initialize waypoint index (start at second point, as first is start)
wp_index = 2;  
figure;
while iter <= max_iterations
    iteration_start = tic;
    
    %% Use the known static grid (no global occupancy update)
    informed_grid = grid_static;
    
    %% Determine current target waypoint from the reduced global path
    current_goal = reducedGlobalPath(wp_index, :);
    
    %% Check if the current waypoint is reached using the tolerance;
    % Once reached, it will not be considered again.
    if norm(bots(1).state(1:2) - current_goal) < waypointTolerance
        if wp_index < size(reducedGlobalPath,1)
            wp_index = wp_index + 1;
            current_goal = reducedGlobalPath(wp_index, :);
        else
            % Final goal reached
            bots(1).finished = true;
            metrics.bot.time_to_goal = iter * params.dt;
            disp(['Final goal reached at time ' num2str(metrics.bot.time_to_goal) ' seconds.']);
            break;
        end
    end
    
    %% Use DWA to compute control commands toward current waypoint
    [v, omega] = dwa(bots(1).state, informed_grid, current_goal, params);
    
    %% Update Bot State using Simple Kinematics
    prev_state = bots(1).state;
    bots(1).state(1) = bots(1).state(1) + v * cos(bots(1).state(3)) * params.dt;
    bots(1).state(2) = bots(1).state(2) + v * sin(bots(1).state(3)) * params.dt;
    bots(1).state(3) = bots(1).state(3) + omega * params.dt;
    bots(1).trajectory = [bots(1).trajectory; bots(1).state(1:2)];
    
    %% Update Metrics
    metrics.bot.total_distance = metrics.bot.total_distance + norm(bots(1).state(1:2) - prev_state(1:2));
    heading_change = abs(angdiff(bots(1).state(3), prev_state(3)));
    metrics.bot.cumulative_heading_change = metrics.bot.cumulative_heading_change + heading_change;
    
    %% Visualization (same as before)
    clf;
    subplot(1,1,1);
    imagesc(flipud(grid_static));
    title('Simulation Environment & Global Path');
    colormap(gray);
    hold on;
    % Plot reduced global path (waypoints)
    plot(reducedGlobalPath(:,1), gridSize(1) - reducedGlobalPath(:,2) + 1, 'b.-', 'MarkerSize', 15);
    % Plot trajectory and robot
    plot(bots(1).trajectory(:,1), gridSize(1) - bots(1).trajectory(:,2) + 1, [bots(1).color '-'], 'LineWidth', 2);
    plot(bots(1).state(1), gridSize(1)-bots(1).state(2)+1, [bots(1).color 'o'], 'MarkerSize', 10, 'LineWidth', 2);
    % Plot current waypoint
    plot(current_goal(1), gridSize(1)-current_goal(2)+1, 'gx', 'MarkerSize', 12, 'LineWidth', 2);
    % For visualization, also plot LIDAR rays
    lidar_ranges = simulateLidar(bots(1).state, grid_static, lidar.angles, lidar.max_range);
    for j = 1:length(lidar.angles)
        angle = bots(1).state(3) + lidar.angles(j);
        endPt = bots(1).state(1:2) + lidar_ranges(j)*[cos(angle), sin(angle)];
        plot([bots(1).state(1) endPt(1)], [gridSize(1)-bots(1).state(2)+1 gridSize(1)-endPt(2)+1], 'r-');
    end
    axis([0.5 gridSize(2)+0.5 0.5 gridSize(1)+0.5]);
    axis equal; hold off;
    drawnow;
    
    %% Increment iteration
    iter = iter + 1;
end

total_sim_time = toc(sim_start);

%% ================ Metrics Post-Processing =================
metrics.bot.path_efficiency = metrics.bot.total_distance / metrics.bot.optimal_distance;
disp('--- Simulation Metrics ---');
fprintf('Time to final goal: %.2f seconds\n', metrics.bot.time_to_goal);
fprintf('Total distance traveled: %.2f\n', metrics.bot.total_distance);
fprintf('Path efficiency (ratio): %.2f\n', metrics.bot.path_efficiency);
fprintf('Cumulative heading change: %.2f radians\n', metrics.bot.cumulative_heading_change);
fprintf('Total simulation time: %.2f seconds\n', total_sim_time);

%% ==================== Helper Functions ====================

%% DWA Local Planner Function
function [best_v, best_omega] = dwa(state, grid, goal, params)
    best_cost = Inf;
    best_v = 0;
    best_omega = 0;
    for v = 0:params.velocity_resolution:params.max_v
        for omega = -params.max_omega:params.omega_resolution:params.max_omega
            cost = evaluateTrajectory(state, v, omega, grid, goal, params);
            if cost < best_cost
                best_cost = cost;
                best_v = v;
                best_omega = omega;
            end
        end
    end
end

%% Trajectory Evaluation for DWA
function cost = evaluateTrajectory(state, v, omega, grid, goal, params)
    t = 0:params.dt:params.predict_time;
    traj = zeros(length(t), 3);
    traj(1,:) = state;
    collision = false;
    for i = 2:length(t)
        traj(i,1) = traj(i-1,1) + v * cos(traj(i-1,3)) * params.dt;
        traj(i,2) = traj(i-1,2) + v * sin(traj(i-1,3)) * params.dt;
        traj(i,3) = traj(i-1,3) + omega * params.dt;
        if checkCollision(traj(i,1:2), grid, params.robot_radius)
            collision = true;
            break;
        end
    end
    if collision
        cost = Inf;
        return;
    end
    goal_cost = norm(traj(end,1:2) - goal);
    desired_heading = atan2(goal(2)-traj(end,2), goal(1)-traj(end,1));
    heading_cost = abs(angdiff(traj(end,3), desired_heading));
    velocity_cost = (params.max_v - v);
    
    safe_distance = 1.5;
    min_clearance = Inf;
    for i = 1:size(traj,1)
        clearance = computeClearance(traj(i,1:2), grid);
        if clearance < min_clearance
            min_clearance = clearance;
        end
    end
    if min_clearance < safe_distance
        clearance_cost = (safe_distance - min_clearance);
    else
        clearance_cost = 0;
    end
    
    % Weights for each cost term
    w_goal = 0.1;
    w_heading = 0.02;
    w_vel = 0.3;
    w_clearance = 0.8;
    cost = w_goal*goal_cost + w_heading*heading_cost + w_vel*velocity_cost + w_clearance*clearance_cost;
end

%% Compute Clearance Function
function clearance = computeClearance(pos, grid)
    [obs_rows, obs_cols] = find(grid==1);
    if isempty(obs_rows)
        clearance = Inf;
        return;
    end
    dists = sqrt((obs_cols - pos(1)).^2 + (obs_rows - pos(2)).^2);
    clearance = min(dists) - 0.5;
end

%% Collision Check Function
function collision = checkCollision(pos, grid, robot_radius)
    global collisionCheckCounter; 
    collisionCheckCounter = collisionCheckCounter + 1;
    [rows, cols] = size(grid);
    x = pos(1); y = pos(2);
    if (x < 1) || (x > cols) || (y < 1) || (y > rows)
        collision = true;
        return;
    end
    [obs_rows, obs_cols] = find(grid==1);
    collision = false;
    for k = 1:length(obs_cols)
        cell_center = [obs_cols(k), obs_rows(k)];
        if norm(pos - cell_center) <= (robot_radius + 0.5)
            collision = true;
            return;
        end
    end
end

%% LIDAR Simulation Function
function distances = simulateLidar(state, grid, angles, max_range)
    pos = state(1:2);
    distances = zeros(size(angles));
    delta = 0.1;
    for i = 1:length(angles)
        angle = state(3) + angles(i);
        distance = 0;
        hit = false;
        while ~hit && distance < max_range
            distance = distance + delta;
            test_point = pos + distance*[cos(angle), sin(angle)];
            if checkCollision(test_point, grid, 0)
                hit = true;
            end
        end
        distances(i) = distance;
    end
end

%% ACO Global Path Planner Function
function bestPath = acoGlobalPathPlanner(grid, start_cell, goal_cell, aco_params)
    % A simplified ACO planner on a discrete grid (8-connected)
    [rows, cols] = size(grid);
    pheromone = ones(rows, cols);
    
    % Heuristic: Euclidean distance to goal for each cell
    heuristic = zeros(rows, cols);
    for r = 1:rows
        for c = 1:cols
            heuristic(r,c) = norm([c, r] - goal_cell);
        end
    end
    
    bestPath = [];
    bestCost = Inf;
    
    % Define 8-connected moves
    moves = [ -1, -1; -1, 0; -1, 1;
               0, -1;         0, 1;
               1, -1;  1, 0;  1, 1];
    
    for iter = 1:aco_params.max_iter
        paths = {};
        costs = [];
        % Each ant constructs a path from start to goal
        for ant = 1:aco_params.num_ants
            current = start_cell;
            path = current;
            visited = zeros(rows, cols);
            visited(current(2), current(1)) = 1;
            cost = 0;
            % Limit the maximum length to avoid infinite loops
            while norm(current - goal_cell) > 1 && size(path,1) < 500
                neighbors = [];
                probs = [];
                for m = 1:size(moves,1)
                    next = current + moves(m,:);
                    if next(1) < 1 || next(1) > cols || next(2) < 1 || next(2) > rows
                        continue;
                    end
                    if grid(next(2), next(1)) == 1
                        continue;
                    end
                    if visited(next(2), next(1)) == 1
                        continue;
                    end
                    tau = pheromone(next(2), next(1))^aco_params.alpha;
                    eta = (1/(heuristic(next(2), next(1))+eps))^aco_params.beta;
                    prob = tau * eta;
                    neighbors = [neighbors; next];
                    probs = [probs; prob];
                end
                if isempty(probs)
                    break;  % dead end
                end
                probs = probs / sum(probs);
                cumulative = cumsum(probs);
                r = rand();
                idx = find(cumulative >= r, 1, 'first');
                next_cell = neighbors(idx, :);
                path = [path; next_cell];
                cost = cost + norm(next_cell - current);
                current = next_cell;
                visited(current(2), current(1)) = 1;
            end
            if norm(current - goal_cell) <= 1
                path = [path; goal_cell];
                cost = cost + norm(goal_cell - current);
                paths{end+1} = path;
                costs(end+1) = cost;
            end
        end
        
        % Update pheromones based on found paths
        if ~isempty(costs)
            [minCost, bestIdx] = min(costs);
            if minCost < bestCost
                bestCost = minCost;
                bestPath = paths{bestIdx};
            end
            % Evaporation
            pheromone = (1 - aco_params.rho) * pheromone;
            % Deposit pheromone along paths
            for k = 1:length(paths)
                pth = paths{k};
                deposit = aco_params.Q / costs(k);
                for i = 1:size(pth,1)
                    cellPos = pth(i,:);
                    pheromone(cellPos(2), cellPos(1)) = pheromone(cellPos(2), cellPos(1)) + deposit;
                end
            end
        end
    end
end

%% Path Smoothing Function
function newPath = smoothPathACO(path, grid)
    % Iterative smoothing to reduce curvature while staying close to original path.
    weight_data = 0.6;   % Maintain fidelity to original path
    weight_smooth = 0.3; % Smoothing factor
    tolerance = 1e-4;    % Convergence threshold
    max_iter = 1000;
    
    newPath = path;
    change = Inf;
    iter = 0;
    
    while change > tolerance && iter < max_iter
        change = 0;
        iter = iter + 1;
        % Update each intermediate waypoint
        for i = 2:size(path,1)-1
            oldVal = newPath(i,:);
            newPath(i,:) = newPath(i,:) + weight_data*(path(i,:) - newPath(i,:)) + ...
                           weight_smooth*(newPath(i-1,:) + newPath(i+1,:) - 2*newPath(i,:));
            change = change + norm(newPath(i,:) - oldVal);
            % (Optional) Check for collisions; if so, revert update
            if checkCollision(newPath(i,:), grid, 0)
                newPath(i,:) = oldVal;
            end
        end
    end
end

%% Path Subsampling Function
function reducedPath = subsamplePath(path, step)
    % Subsample the path by choosing every "step" point.
    reducedPath = path(1:step:end, :);
    % Ensure the final point is included
    if ~isequal(reducedPath(end,:), path(end,:))
        reducedPath(end+1,:) = path(end,:);
    end
end

%% Angular Difference Function
function diff = angdiff(theta1, theta2)
    diff = atan2(sin(theta1 - theta2), cos(theta1 - theta2));
end
