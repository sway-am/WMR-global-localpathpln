%% Single Bot Simulation in a Warehouse Environment using DWA with Global Re-planning (Metrics Evaluation)
clear; clc; close all;
global collisionCheckCounter; 
collisionCheckCounter = 0;  % Initialize collision check counter

%% Environment Setup - Bigger & More Complex Warehouse Layout
gridSize = [50,50];              % Grid dimensions
grid_static = zeros(gridSize);   % 0 = free, 1 = obstacle

% Outer walls
grid_static(1,:) = 1;        % Top wall
grid_static(50,:) = 1;       % Bottom wall
grid_static(:,1) = 1;        % Left wall
grid_static(:,50) = 1;       % Right wall

% Define multiple horizontal shelf rows with gaps
grid_static(8:10, 5:15)   = 1;    % Shelf row 1, segment 1
grid_static(8:10, 25:35)  = 1;    % Shelf row 1, segment 2

grid_static(18:20, 5:15)  = 1;    % Shelf row 2, segment 1
grid_static(18:20, 25:35) = 1;    % Shelf row 2, segment 2

grid_static(28:30, 10:20) = 1;    % Shelf row 3, segment 1
grid_static(28:30, 30:40) = 1;    % Shelf row 3, segment 2

grid_static(38:40, 5:15)  = 1;    % Shelf row 4, segment 1
grid_static(38:40, 25:35) = 1;    % Shelf row 4, segment 2

% Additional vertical shelf obstacles
grid_static(12:22, 40:42) = 1;
grid_static(30:40, 10:12) = 1;

%% Global Occupancy Map Initialization
global_map = zeros(gridSize);  % 0 = free, 1 = occupied

%% (Dynamic obstacles removed)
% For this simulation, we do not include dynamic obstacles.
grid_dynamic = zeros(gridSize);

%% Robot and Simulation Parameters
params.max_v = 1.0;              % Maximum linear velocity [m/s]
params.max_omega = 1.0;          % Maximum angular velocity [rad/s]
params.dt = 0.1;                 % Time step [s]
params.predict_time = 3.0;       % Prediction horizon [s]
params.velocity_resolution = 0.1;
params.omega_resolution = 0.1;
params.robot_radius = 0.5;

lidar.angles = -pi/3 : pi/36 : pi/3;
lidar.max_range = 7;  % Sensing range

global_mode_timeout = 30;        % Global planning mode timeout (iterations)
subgoal_threshold = 0.7;         % Distance threshold for subgoal attainment
goal_reached_threshold = 0.5;    % Distance to consider the goal reached

%% Single Bot Setup
numBots = 1;
bots = struct([]);

% Bot: from bottom-left to top-right
bots(1).state = [2, 2, 0];
bots(1).main_goal = [45, 45];
bots(1).trajectory = bots(1).state(1:2);
bots(1).global_mode = false;
bots(1).global_path = [];
bots(1).subgoal_index = 1;
bots(1).global_mode_iter_count = 0;
bots(1).stuck_counter = 0;
bots(1).last_distance = norm(bots(1).state(1:2) - bots(1).main_goal);
bots(1).color = 'r';
bots(1).finished = false;  % flag to stop when goal reached

%% Metrics Initialization
metrics.bot.time_to_goal = NaN;         % simulation time when goal reached
metrics.bot.total_distance = 0;           % distance traveled along trajectory
metrics.bot.optimal_distance = norm(bots(1).main_goal - bots(1).trajectory(1,:));
metrics.bot.cumulative_heading_change = 0; % total heading change (in radians)
metrics.bot.global_planner_invocations = 0; % count of global planner activations

total_iterations = 0;
sim_start = tic;  % Start overall simulation timer

max_iterations = 1500;  % Maximum iterations

%% Simulation Loop
figure;
for iter = 1:max_iterations
    iteration_start = tic; % Start timer for this iteration
    total_iterations = iter;
    
    %% (Dynamic obstacles update removed)
    % Combined grid: static obstacles (no dynamic obstacles in this simulation)
    grid_combined_all = grid_static;
    
    %% Update Global Occupancy Map based on Sensor Readings from the Bot
    % Bot uses its LIDAR to sense obstacles.
    lidar_ranges = simulateLidar(bots(1).state, grid_combined_all, lidar.angles, lidar.max_range);
    for j = 1:length(lidar.angles)
        angle = bots(1).state(3) + lidar.angles(j);
        distance = lidar_ranges(j);
        pos_hit = bots(1).state(1:2) + distance*[cos(angle), sin(angle)];
        row = round(pos_hit(2));
        col = round(pos_hit(1));
        if row >= 1 && row <= gridSize(1) && col >= 1 && col <= gridSize(2)
            if distance < lidar.max_range
                global_map(row, col) = 1;  % obstacle detected
            else
                global_map(row, col) = 0;  % free space confirmed
            end
        end
    end
    
    %% Combine global map with combined grid for informed planning
    informed_grid = max(grid_combined_all, global_map);
    
    %% Update Bot using informed_grid for planning
    if bots(1).finished
        % If the goal is reached, skip update.
        continue;
    end
    
    % Check if the bot has reached its main goal
    if norm(bots(1).state(1:2) - bots(1).main_goal) < goal_reached_threshold
        bots(1).finished = true;
        metrics.bot.time_to_goal = iter * params.dt;
        disp(['Goal reached at time ' num2str(metrics.bot.time_to_goal) ' seconds.']);
        continue;
    end
    
    % Determine current goal for local planning
    if bots(1).global_mode
        current_goal = bots(1).global_path(bots(1).subgoal_index, :);
        current_goal = [current_goal(2), current_goal(1)];
    else
        current_goal = bots(1).main_goal;
    end
    
    % Compute local control using DWA with the informed grid.
    [v, omega] = dwa(bots(1).state, informed_grid, current_goal, params);
    
    % Check for progress toward the main goal (stuck detection)
    current_distance = norm(bots(1).state(1:2) - bots(1).main_goal);
    if abs(bots(1).last_distance - current_distance) < 0.05
        bots(1).stuck_counter = bots(1).stuck_counter + 1;
    else
        bots(1).stuck_counter = 0;
    end
    bots(1).last_distance = current_distance;
    
    % Invoke global planner if stuck and not already in global mode
    if bots(1).stuck_counter > 15 && ~bots(1).global_mode
        start_cell = [round(bots(1).state(2)), round(bots(1).state(1))];
        goal_cell = [bots(1).main_goal(2), bots(1).main_goal(1)];
        path = globalPlanner(informed_grid, start_cell, goal_cell);
        if ~isempty(path)
            bots(1).global_mode = true;
            bots(1).global_path = path;
            bots(1).subgoal_index = 1;
            bots(1).global_mode_iter_count = 0;
            metrics.bot.global_planner_invocations = metrics.bot.global_planner_invocations + 1;
            disp('Global planner activated!');
        else
            disp('Global planner failed: no path found.');
        end
        bots(1).stuck_counter = 0;
    end
    
    % Global mode: check subgoal attainment and timeout
    if bots(1).global_mode
        bots(1).global_mode_iter_count = bots(1).global_mode_iter_count + 1;
        if norm(bots(1).state(1:2) - current_goal) < subgoal_threshold
            bots(1).subgoal_index = bots(1).subgoal_index + 1;
            if bots(1).subgoal_index > size(bots(1).global_path,1)
                bots(1).global_mode = false;
                disp('Global path completed. Resuming main goal.');
            else
                disp(['Advancing to subgoal ' num2str(bots(1).subgoal_index)]);
            end
        end
        if bots(1).global_mode_iter_count > global_mode_timeout
            bots(1).global_mode = false;
            disp('Global mode timeout. Reverting to local planning.');
        end
    end
    
    % Record metrics before updating state
    prev_state = bots(1).state;
    
    % Update bot state using simple kinematics
    bots(1).state(1) = bots(1).state(1) + v * cos(bots(1).state(3)) * params.dt;
    bots(1).state(2) = bots(1).state(2) + v * sin(bots(1).state(3)) * params.dt;
    bots(1).state(3) = bots(1).state(3) + omega * params.dt;
    bots(1).trajectory = [bots(1).trajectory; bots(1).state(1:2)];
    
    % Update distance traveled metric (Euclidean distance increment)
    metrics.bot.total_distance = metrics.bot.total_distance + norm(bots(1).state(1:2) - prev_state(1:2));
    
    % Record cumulative heading change (absolute change)
    heading_change = abs(angdiff(bots(1).state(3), prev_state(3)));
    metrics.bot.cumulative_heading_change = metrics.bot.cumulative_heading_change + heading_change;
    
    %% Active Visualization: Display the Global Occupancy Map and the Simulation Environment
    clf;
    subplot(1,2,1);
    imagesc(flipud(global_map));
    title('Global Occupancy Map');
    colormap(gray);
    axis equal;
    axis([0.5 gridSize(2)+0.5 0.5 gridSize(1)+0.5]);
    
    subplot(1,2,2);
    imagesc(flipud(max(grid_static, global_map)));
    title('Simulation Environment');
    colormap(gray);
    hold on;
    % Plot the bot: trajectory, current position, goal, and LIDAR rays
    plot(bots(1).trajectory(:,1), gridSize(1) - bots(1).trajectory(:,2) + 1, [bots(1).color '-'], 'LineWidth', 2);
    plot(bots(1).state(1), gridSize(1)-bots(1).state(2)+1, [bots(1).color 'o'], 'MarkerSize', 10, 'LineWidth', 2);
    plot(bots(1).main_goal(1), gridSize(1)-bots(1).main_goal(2)+1, [bots(1).color 'x'], 'MarkerSize', 10, 'LineWidth', 2);
    if bots(1).global_mode && ~isempty(bots(1).global_path)
        gp = bots(1).global_path;
        gp_xy = [gp(:,2), gp(:,1)];
        gp_xy(:,2) = gridSize(1) - gp_xy(:,2) + 1;
        plot(gp_xy(:,1), gp_xy(:,2), 'y--', 'LineWidth', 2);
    end
    % Plot LIDAR rays for visualization
    lidar_ranges = simulateLidar(bots(1).state, grid_static, lidar.angles, lidar.max_range);
    for j = 1:length(lidar.angles)
        angle = bots(1).state(3) + lidar.angles(j);
        endPt = bots(1).state(1:2) + lidar_ranges(j)*[cos(angle), sin(angle)];
        plot([bots(1).state(1) endPt(1)], [gridSize(1)-bots(1).state(2)+1 gridSize(1)-endPt(2)+1], 'r-');
    end
    axis([0.5 gridSize(2)+0.5 0.5 gridSize(1)+0.5]);
    axis equal;
    hold off;
    drawnow;
    
    % End simulation early if goal is reached
    if bots(1).finished
        disp('Goal reached!');
        break;
    end
    
    % (Optional) Record iteration computation time if needed
    iter_time(iter) = toc(iteration_start);
end

total_sim_time = toc(sim_start);

%% Metrics Post-Processing
% Calculate path efficiency as the ratio of actual distance traveled to the optimal distance.
metrics.bot.path_efficiency = metrics.bot.total_distance / metrics.bot.optimal_distance;

% Display Metrics: time traveled, total distance, and cumulative heading change.
disp('--- Simulation Metrics ---');
fprintf('Time to goal: %.2f seconds\n', metrics.bot.time_to_goal);
fprintf('Total distance traveled: %.2f\n', metrics.bot.total_distance);
fprintf('Path efficiency (ratio): %.2f\n', metrics.bot.path_efficiency);
fprintf('Cumulative heading change: %.2f radians\n', metrics.bot.cumulative_heading_change);
fprintf('Total simulation time: %.2f seconds\n', total_sim_time);
fprintf('Global planner activations: %d\n', metrics.bot.global_planner_invocations);

%% --- Helper Functions ---
function [best_v, best_omega] = dwa(state, grid, goal, params)
    best_cost = Inf;
    best_v = 0;
    best_omega = 0;
    for v = 0:params.velocity_resolution:params.max_v
        for omega = -params.max_omega:params.omega_resolution:params.max_omega
            cost = evaluateTrajectory(state, v, omega, grid, goal, params);
            if cost < best_cost
                best_cost = cost;
                best_v = v;
                best_omega = omega;
            end
        end
    end
end

function cost = evaluateTrajectory(state, v, omega, grid, goal, params)
    t = 0:params.dt:params.predict_time;
    traj = zeros(length(t), 3);
    traj(1,:) = state;
    collision = false;
    for i = 2:length(t)
        traj(i,1) = traj(i-1,1) + v * cos(traj(i-1,3)) * params.dt;
        traj(i,2) = traj(i-1,2) + v * sin(traj(i-1,3)) * params.dt;
        traj(i,3) = traj(i-1,3) + omega * params.dt;
        if checkCollision(traj(i,1:2), grid, params.robot_radius)
            collision = true;
            break;
        end
    end
    if collision
        cost = Inf;
        return;
    end
    goal_cost = norm(traj(end,1:2) - goal);
    desired_heading = atan2(goal(2)-traj(end,2), goal(1)-traj(end,1));
    heading_cost = abs(angdiff(traj(end,3), desired_heading));
    velocity_cost = (params.max_v - v);
    
    safe_distance = 1.5;
    min_clearance = Inf;
    for i = 1:size(traj,1)
        clearance = computeClearance(traj(i,1:2), grid);
        if clearance < min_clearance
            min_clearance = clearance;
        end
    end
    if min_clearance < safe_distance
        clearance_cost = (safe_distance - min_clearance);
    else
        clearance_cost = 0;
    end
    
    w_goal = 0.1;
    w_heading = 0.02;
    w_vel = 0.3;
    w_clearance = 0.8;
    cost = w_goal*goal_cost + w_heading*heading_cost + w_vel*velocity_cost + w_clearance*clearance_cost;
end

function clearance = computeClearance(pos, grid)
    [obs_rows, obs_cols] = find(grid==1);
    if isempty(obs_rows)
        clearance = Inf;
        return;
    end
    dists = sqrt((obs_cols - pos(1)).^2 + (obs_rows - pos(2)).^2);
    clearance = min(dists) - 0.5;
end

function collision = checkCollision(pos, grid, robot_radius)
    global collisionCheckCounter; 
    collisionCheckCounter = collisionCheckCounter + 1;
    
    [rows, cols] = size(grid);
    x = pos(1); y = pos(2);
    if (x<1)||(x>cols)||(y<1)||(y>rows)
        collision = true;
        return;
    end
    [obs_rows, obs_cols] = find(grid==1);
    collision = false;
    for k = 1:length(obs_cols)
        cell_center = [obs_cols(k), obs_rows(k)];
        if norm(pos - cell_center) <= (robot_radius + 0.5)
            collision = true;
            return;
        end
    end
end

function distances = simulateLidar(state, grid, angles, max_range)
    pos = state(1:2);
    distances = zeros(size(angles));
    delta = 0.1;
    for i = 1:length(angles)
        angle = state(3) + angles(i);
        distance = 0;
        hit = false;
        while ~hit && distance < max_range
            distance = distance + delta;
            test_point = pos + distance*[cos(angle), sin(angle)];
            if checkCollision(test_point, grid, 0)
                hit = true;
            end
        end
        distances(i) = distance;
    end
end

function path = globalPlanner(grid, start_cell, goal_cell)
    [rows, cols] = size(grid);
    openSet = [];
    closedSet = zeros(rows, cols);
    parent = cell(rows, cols);
    h = @(r,c) sqrt((r-goal_cell(1))^2 + (c-goal_cell(2))^2);
    start_node = struct('row', start_cell(1), 'col', start_cell(2), 'g', 0, 'f', h(start_cell(1), start_cell(2)));
    openSet = [start_node];
    neighbors = [-1,-1; -1,0; -1,1; 0,-1; 0,1; 1,-1; 1,0; 1,1];
    found = false;
    while ~isempty(openSet)
        [~, idx] = min([openSet.f]);
        current = openSet(idx);
        openSet(idx) = [];
        closedSet(current.row, current.col) = 1;
        if current.row==goal_cell(1) && current.col==goal_cell(2)
            found = true;
            break;
        end
        for i = 1:size(neighbors,1)
            r = current.row+neighbors(i,1);
            c = current.col+neighbors(i,2);
            if r<1 || r>rows || c<1 || c>cols, continue; end
            if grid(r,c)==1 || closedSet(r,c)==1, continue; end
            tentative_g = current.g+norm(neighbors(i,:));
            inOpen = false;
            for j = 1:length(openSet)
                if openSet(j).row==r && openSet(j).col==c
                    inOpen = true;
                    if tentative_g < openSet(j).g
                        openSet(j).g = tentative_g;
                        openSet(j).f = tentative_g+h(r,c);
                        parent{r,c} = [current.row, current.col];
                    end
                    break;
                end
            end
            if ~inOpen
                neighbor_node = struct('row', r, 'col', c, 'g', tentative_g, 'f', tentative_g+h(r,c));
                openSet = [openSet, neighbor_node];
                parent{r,c} = [current.row, current.col];
            end
        end
    end
    if found
        path = [];
        r = goal_cell(1);
        c = goal_cell(2);
        path = [r, c];
        while ~(r==start_cell(1) && c==start_cell(2))
            prc = parent{r,c};
            r = prc(1);
            c = prc(2);
            path = [[r, c]; path];
        end
    else
        path = [];
    end
end

%% Note: The activeDisplayGrid function is integrated within the simulation loop above.
